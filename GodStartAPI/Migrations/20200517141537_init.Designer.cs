// <auto-generated />
using System;
using GodStartAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GodStartAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200517141537_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GodStartAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IT",
                            UserId = 0,
                            selected = false
                        });
                });

            modelBuilder.Entity("GodStartAPI.Models.CategoryRessource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StoreUserId");

                    b.ToTable("CategoryRessource");
                });

            modelBuilder.Entity("GodStartAPI.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryRessourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostNumberId")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CategoryRessourceId");

                    b.HasIndex("PostNumberId");

                    b.HasIndex("UserId1");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreationDate = new DateTime(2020, 5, 17, 16, 15, 37, 441, DateTimeKind.Local).AddTicks(5958),
                            ExpirationDate = new DateTime(2020, 6, 16, 16, 15, 37, 441, DateTimeKind.Local).AddTicks(5958),
                            ImageUrl = "",
                            PostNumberId = 1,
                            SubTitle = "",
                            Text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Dignissim cras tincidunt lobortis feugiat vivamus. Tellus at urna condimentum.",
                            Title = "JobTitle 1",
                            UserId = 0,
                            selected = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "",
                            PostNumberId = 1,
                            SubTitle = "",
                            Text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Dignissim cras tincidunt lobortis feugiat vivamus. Tellus at urna condimentum.",
                            Title = "JobTitle 2",
                            UserId = 0,
                            selected = false
                        });
                });

            modelBuilder.Entity("GodStartAPI.Models.JobRessource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Categoryselected")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostNumberId")
                        .HasColumnType("int");

                    b.Property<int>("PostNumberNumber")
                        .HasColumnType("int");

                    b.Property<bool>("PostNumberselected")
                        .HasColumnType("bit");

                    b.Property<string>("StoreUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PostNumberId");

                    b.HasIndex("StoreUserId");

                    b.ToTable("JobRessource");
                });

            modelBuilder.Entity("GodStartAPI.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostNumberId");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Valby",
                            PostNumberId = 1
                        });
                });

            modelBuilder.Entity("GodStartAPI.Models.PostNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("PostNumbers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 2500,
                            UserId = 0,
                            selected = false
                        });
                });

            modelBuilder.Entity("GodStartAPI.Models.StoreUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StoreUser");
                });

            modelBuilder.Entity("GodStartAPI.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("JobId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobId1");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("GodStartAPI.Models.Category", b =>
                {
                    b.HasOne("GodStartAPI.Models.StoreUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("GodStartAPI.Models.CategoryRessource", b =>
                {
                    b.HasOne("GodStartAPI.Models.StoreUser", null)
                        .WithMany("SelectedCategories")
                        .HasForeignKey("StoreUserId");
                });

            modelBuilder.Entity("GodStartAPI.Models.Job", b =>
                {
                    b.HasOne("GodStartAPI.Models.Category", "Category")
                        .WithMany("JobList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GodStartAPI.Models.CategoryRessource", null)
                        .WithMany("JobList")
                        .HasForeignKey("CategoryRessourceId");

                    b.HasOne("GodStartAPI.Models.PostNumber", "PostNumber")
                        .WithMany("JobList")
                        .HasForeignKey("PostNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GodStartAPI.Models.StoreUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("GodStartAPI.Models.JobRessource", b =>
                {
                    b.HasOne("GodStartAPI.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GodStartAPI.Models.PostNumber", "PostNumber")
                        .WithMany()
                        .HasForeignKey("PostNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GodStartAPI.Models.StoreUser", null)
                        .WithMany("SelectedJobs")
                        .HasForeignKey("StoreUserId");
                });

            modelBuilder.Entity("GodStartAPI.Models.Location", b =>
                {
                    b.HasOne("GodStartAPI.Models.PostNumber", "PostNumber")
                        .WithMany("Locations")
                        .HasForeignKey("PostNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GodStartAPI.Models.PostNumber", b =>
                {
                    b.HasOne("GodStartAPI.Models.StoreUser", "User")
                        .WithMany("SelectedLocations")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("GodStartAPI.Models.Tag", b =>
                {
                    b.HasOne("GodStartAPI.Models.Job", null)
                        .WithMany("Tags")
                        .HasForeignKey("JobId");

                    b.HasOne("GodStartAPI.Models.JobRessource", "Job")
                        .WithMany("Tags")
                        .HasForeignKey("JobId1");
                });
#pragma warning restore 612, 618
        }
    }
}
